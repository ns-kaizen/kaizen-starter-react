import { Client, fetchExchange } from 'urql'
import { cacheExchange } from 'urql'

// // uncomment this when you've got a schema.json being generated by kaizen
// import schema from '@/../schema.json'
// import customScalarsExchange from 'urql-custom-scalars-exchange'

// const scalarsExchange = customScalarsExchange({
// 	// @ts-expect-error - our schema should be fine
// 	schema,
// 	scalars: {
// 		Date(value) {
// 			return new Date(value)
// 		},
// 	},
// })

export const client = new Client({
	url: `${import.meta.env.VITE_API_URL}/api/graphql`,
	exchanges: [
		//scalarsExchange,
		cacheExchange,
		fetchExchange,
	],
	fetchOptions: () => ({ credentials: 'include' }),
	// suspense: true,
	requestPolicy: 'cache-and-network',
	// append operation name to the query string for easier debugging
	fetch: (url, fetchOptions) => {
		const body = JSON.parse(fetchOptions?.body?.toString() || '{}')
		return fetch(`${url}?${body.operationName}`, fetchOptions)
	},
})
